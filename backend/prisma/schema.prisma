// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Prisma schema for MongoDB

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String       @unique
  password      String
  role          String       @default("student") // student, teacher, admin
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  notes         Note[]
  flashcards    Flashcard[]
  studyPlans    StudyPlan[]
  progress      Progress[]
  decks         Deck[]
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
}

model Note {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  category    String
  userId      String      @db.ObjectId
  user        User        @relation(fields: [userId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Deck {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  tags        String[]
  userId      String      @db.ObjectId
  user        User        @relation(fields: [userId], references: [id])
  isPublic    Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  flashcards  Flashcard[]
}

model Flashcard {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  term        String
  definition  String
  deckId      String   @db.ObjectId
  deck        Deck     @relation(fields: [deckId], references: [id])
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model StudyPlan {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  goal        String
  startDate   DateTime
  endDate     DateTime
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Progress {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  testId      String   @db.ObjectId
  completed   Boolean  @default(false)
  score       Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
} 