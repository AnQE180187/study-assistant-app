const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function fixStudyPlanSchema() {
  try {
    console.log('üîß B·∫Øt ƒë·∫ßu fix StudyPlan schema...');
    
    // B∆∞·ªõc 1: Ki·ªÉm tra xem c√≥ field 'time' kh√¥ng
    console.log('üìã Ki·ªÉm tra schema hi·ªán t·∫°i...');
    
    // B∆∞·ªõc 2: Backup d·ªØ li·ªáu c≈©
    const oldPlans = await prisma.studyPlan.findMany();
    console.log(`üìä T√¨m th·∫•y ${oldPlans.length} study plans`);
    
    // B∆∞·ªõc 3: Migration d·ªØ li·ªáu
    for (const plan of oldPlans) {
      try {
        let startTime = '09:00';
        let endTime = '10:00';
        
        // N·∫øu c√≥ field time c≈©
        if (plan.time) {
          const oldTime = plan.time;
          if (oldTime.includes(':')) {
            const [hours, minutes] = oldTime.split(':');
            const startHour = parseInt(hours);
            const startMinute = parseInt(minutes);
            
            // T·∫°o endTime b·∫±ng c√°ch c·ªông th√™m 1 gi·ªù
            const endHour = startHour + 1;
            const endMinute = startMinute;
            
            startTime = `${startHour.toString().padStart(2, '0')}:${startMinute.toString().padStart(2, '0')}`;
            endTime = `${endHour.toString().padStart(2, '0')}:${endMinute.toString().padStart(2, '0')}`;
          }
        }
        
        // C·∫≠p nh·∫≠t v·ªõi startTime v√† endTime
        await prisma.studyPlan.update({
          where: { id: plan.id },
          data: {
            startTime,
            endTime
          }
        });
        
        console.log(`‚úÖ ƒê√£ fix plan: ${plan.title}`);
      } catch (error) {
        console.error(`‚ùå L·ªói fix plan ${plan.id}:`, error.message);
      }
    }
    
    console.log('üéâ Fix schema ho√†n th√†nh!');
  } catch (error) {
    console.error('‚ùå L·ªói fix schema:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Ch·∫°y fix
fixStudyPlanSchema(); 